Collection = group of objects 
collection frame work = it contains lot of classes and interfaces , (api's) used for collection . (to store and manipulate)

why Collections framework ??
> So to store and handle many number of variables Arrays was created .
> But there are many drawbacks with array , mainly predetrmined memory  and difficult to do operations with Array .
> To rectify these drawbacks Collections framework was introduced , to handle group of objects  and it contains lot of APIs with it .



Array                                   Collection 

> fixed size                          > Growable
> its not used where memory           >  better in terms of memory
      is preferred     
> Performance is better               > comparitively low
>can hold both primitive and          > can hold only objects  (primitive data  types will be automatically converted into wrapper class objects)
            objects
> readymade methods or api's          > lots of API Avilable , so easy to program
   are not available
    (no underlined datastructure)
    increase programming complexity        
            
            
IMportant   interfaces in Collection Framework :
1. Collection
2. List
3. Set
4. SortedSet
5. NavigableSet
6. Queue
   > All the above interfaces are sub interfaces of collection , which is sub-interface of iterable ihterface .

 > Note : Map is not a sub interface of collection interface . 
7. Map
8. SortedMap 
9. NavigableMap




Collection vs Collections
Collection
	> Interface
	> add(), clear(), remove(), contains()  (implemented through sub interfaces , like List , Set etc. )
	> Has static, default and abstract methods
Collections
	> Utility class
	> addAll(), sort(), dejoint(), copy()
	> Only static methods

            


